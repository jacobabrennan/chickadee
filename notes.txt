

//== What does this currently do? ==============================================

//-- Basic Structure -----------------------------
Express server without any best practices fleshed out.
Bare bones react client in progress

//-- User Management -----------------------------
express router mounted at /auth
user sessions present
can register
can login
can logout

//-- Post API (content) --------------------------
express router mounted at /feed, to which a user agent to post new posts, get
    a specific post, or get all posts.
    Confusing, I know, and not very fleshed out

//-- Client (react) ------------------------------
Auth router handling registration, login, and logout
    - Doesn't handle network failures
    - Doesn't display failure reasons to the user
Basic post submission form
    - Only handles submission of a body of text


//== Major things I could work on ==============================================

Basic Process:
    Button to load view
    View renders components
    components make apollo query (useQuery)
    apollo makes graphQL query
    resolver makes SQL query, structures data
    component rerenders data
    rinse, repeat


Client Themeing / Branding
+ Client styling, structure, & clean-up:
    Pad feed bottom
    Fill out composer a little
    Remove index_old.js from API
    Authentication pages
    Default portrait url
Add back arrow to navigate through history
Project Structure:
    Research industry standard directory structure
    Move URL/PATH/etc. constants to central file
Post Improvements:
+   reply and quote
    allow posting of other media types, such as video, audio, links, or graphics
        other post types, such as replies or quotes
    update feed after successful post
    (hash)tags?
+ Subscriptions
Handle error states in client
Loading State for:
    Image Upload
Vouching System (trust count?):
    View vouching user
    View vouched users
Search Function for users, text content, and tags
+ Client side validation of stuff:
    Posts:
        Post length
    Settings:
        Name
        Description
Server side validation:
    Post length
User Permissions:
    Inter-user viewing
    bro, do you even vouch?
Cache Issues:
    Give each portrait photo a new url
Settings and Authentication:
    Change Password
    email validation
Likes!?
Privacy settings
    block lists
Refactor Data Access Layer
    Remove database logic (knex) from resolvers
Generate smaller images automatically, for use beside posts
Swap in better database
User Joined Date


//== Long Term Strategy Thoughts ===============================================

Who is allowed to reply? Why allow trolls to make bank by parasitizing users?

Chickadee holidays?
    like valentines day (but not) where you send special data-things to people
        you admire

Letters from staff
    dev updates
    financials, including detailed budget


//== Known Endpoints ===========================================================

//-- Current Iteration Goals ---------------------
-client global:
    get authentication: ????
-home:
    -get feed: [PostContext!]!
    make post (mutate): PostContext
-user profile view:
    get user info: ????
    -get user feed: [PostContext!]!
    follow (mutate): Boolean!
    unfollow (mutate): Boolean!
edit profile view:
    get profile: User!
    set profile (mutate): User!
-view post:
    -get post: [postContext!]!

PostContext:
    post
        postId
        text
        (other fields eventually, like 'photoUrls' or 'quoteId')
    user
        userId
        name
        portraitUrl

Post
    postId
    authorId
    text
    created
    (other fields eventually, like 'photoUrls' or 'quoteId')

User
    userId
    name
    description
    portraitUrl
    follows
        followers
        following
        follows


//-- Future Iteration Goals ----------------------
-client global:
    get authentication: ????
    -get messages (subscription): ????
    -get notifications (subscription): ????
-home:
    -get feed (subscription): [postContext!]!
    make post (mutate): postContext
-user profile view:
    get user info: ????
    -get user feed (subscription): [postContext!]!
    follow (mutate): Boolean!
    unfollow (mutate): Boolean!
edit profile view:
    get profile: userProfile!
    set profile (mutate): userProfile!
-view post:
    -get post: [postContext!]!
-messages view:
    -get messages (subscription): ????
    -get message: ????
    -send message (mutate): ????
    -set message read (mutate): ????
-notifications view:
    -get notifications (subscription): ????
    -get notification: ????
    -set notification read (mutate): ????


//== TO DO =====================================================================

Resolve all questions marked "NOTE" in both repos
Protect against common attacks:
    large string / file uploads
    rate limiting / flood control
Switch to better database (not sqlite3)
bcryptjs should be swapped out for regular bcrypt. In order to do so, a stable version of nodejs must be in use. The current stable version, as of writing, has a poor workflow for using ES6 modules.