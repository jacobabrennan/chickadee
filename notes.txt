

//== What does this currently do? ==============================================

//-- Basic Structure -----------------------------
Express server without any best practices fleshed out.
Bare bones react client in progress

//-- User Management -----------------------------
express router mounted at /auth
user sessions present
can register
can login
can logout

//-- Post API (content) --------------------------
express router mounted at /feed, to which a user agent to post new posts, get
    a specific post, or get all posts.
    Confusing, I know, and not very fleshed out

//-- Client (react) ------------------------------
Auth router handling registration, login, and logout
    - Doesn't handle network failures
    - Doesn't display failure reasons to the user
Basic post submission form
    - Only handles submission of a body of text


//== Major things I could work on ==============================================

work on posts:
    update feed after successful post
    allow posting of other media types, such as video, audio, links, or graphics
        other post types, such as replies or quotes
    pull userdata with post list
    reply and quote
    tags (hashtags)
handle error states in client
start work on vouches (trust count?)
Privacy settings
    block lists
Change Password
Display Name Preferences
swap in better database
Search Function for users, text content, and tags
another round of client styling and cleanup
Client side validation of stuff:
    Settings:
        Name
        Description
Links to:
    Own profile
    Settings

Who is allowed to reply? Why allow trolls to make bank by parasitizing users?

Chickadee holidays?
    like valentines day (but not) where you send special data-things to people
        you admire

Letters from staff
    dev updates
    financials, including detailed budget


//== Known Endpoints ===========================================================

//-- Current Iteration Goals ---------------------
-client global:
    get authentication: ????
-home:
    -get feed: [PostContext!]!
    make post (mutate): PostContext
-user profile view:
    get user info: ????
    -get user feed: [PostContext!]!
    follow (mutate): Boolean!
    unfollow (mutate): Boolean!
edit profile view:
    get profile: User!
    set profile (mutate): User!
-view post:
    -get post: [postContext!]!

PostContext:
    post
        postId
        text
        (other fields eventually, like 'photoUrls' or 'quoteId')
    user
        userId
        name
        portraitUrl

Post
    postId
    authorId
    text
    created
    (other fields eventually, like 'photoUrls' or 'quoteId')

User
    userId
    name
    description
    portraitUrl
    follows
        followers
        following
        follows


//-- Future Iteration Goals ----------------------
-client global:
    get authentication: ????
    -get messages (subscription): ????
    -get notifications (subscription): ????
-home:
    -get feed (subscription): [postContext!]!
    make post (mutate): postContext
-user profile view:
    get user info: ????
    -get user feed (subscription): [postContext!]!
    follow (mutate): Boolean!
    unfollow (mutate): Boolean!
edit profile view:
    get profile: userProfile!
    set profile (mutate): userProfile!
-view post:
    -get post: [postContext!]!
-messages view:
    -get messages (subscription): ????
    -get message: ????
    -send message (mutate): ????
    -set message read (mutate): ????
-notifications view:
    -get notifications (subscription): ????
    -get notification: ????
    -set notification read (mutate): ????


//== TO DO =====================================================================

Resolve all questions marked "NOTE" in both repos
bcryptjs should be swapped out for regular bcrypt. In order to do so, a stable version of nodejs must be in use. The current stable version, as of writing, has a poor workflow for using ES6 modules.